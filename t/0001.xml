<?xml version="1.0" encoding="UTF-8" ?>
<language>
  <page id="5554401" title="UT Console" descr="Strings for use in the Console - do not translate commands for sonsistency!" voice="no">
    <t id="1">&amp;</t><!-- Prefix for all Commands - / is not suitable since its used internally by the game.-->
    <!-- t id 2 to 99 is reserved for general help/manual stuff -->
    <t id="3">Help entry not found. Available help topics are:</t>
    <t id="4">{5554401,1}help</t>
    <t id="5">Currently available Commands and their Params: (pass \033Wh\033X or \033Whelp\033X to a command to get further usage info)\n\033W'+{5554401,1}+'info $object\033X Prints Info about the Object\n\033W'+{5554401,1}+'destroy $object\033X Destroys targeted Object after confirmation\n\nAlso see \033W'+{5554401,1}+'help target\033X for info on targeting objects.</t>
    <t id="6">{5554401,2} target</t>
    <t id="7">Targeting Objects - insert this in place of an $object placeholder (not all method implemented yet, but planned)\n\033WABC-123\033X Targeting via an Objects IDcode - It is not uique, so use careful cause it might target an unintended object\n\033W0x1234abcd\033X Targeting via an Objects unique identifier (usually printed in the Log) - technically any number is fine\n\033Wptarget\033X current Player Target\n\033Wgtarget\033X current guidance target (NOT the active mission Target)\n\033Watarget\033X the current destination of the Autopilot, if active\n\033Wpcontainer\033X or \033Wpobject\033X The Object the Player is currently on (Ship or Station)\n\nhtargets,mapobjects not yet implemented</t>
    <t id="8">{5554401,2} root property</t>
    <t id="9">The Root Property is the starting point of a property chain. this can be an Object (see {5554401,4} ) or one of the following:\n\033Wnull\033X , \033Wtrue\033X , \033Wfalse\033X - just what you expect. no further properties obviously.\n\033Wcomponent.&lt;number&gt;\033X or object.&lt;number&gt; - explicitly getting an object from a number. Primarily for setting remote vars.\n\033Wgameparam.&lt;paramname&gt;\033X - reading a game param /(Startup param? not tested yet../)\n\033Wparam.&lt;category&gt;.&lt;param&gt;\033X - reading a scriptparam from libraries/parameters.xml, scriptrarams section\n\033Wmacro.&lt;macroid&gt;\033X - referencing macro directly by its id\n\033Wmd.&lt;Scriptname&gt;.&lt;Cuename&gt;\033X - directly referencing an MD cue (only works for base cues, not for their instances!)\n\033Wmdvar.&lt;$varname&gt;\033X - reading an md global var /(note: internal md way is just md.$varname, but i have to disabbiguate from the previous/)\n\033Wglobal.&lt;$varname&gt;\033X - reading a global var\n\033Wfaction.&lt;factionid&gt;\033X -  getting a faction from an id\n\033Wtag.&lt;tagname&gt;\033X - getting a tag /(note: willl never fail because tags are created as needed/)\n\033Wware.&lt;wareid&gt;\033X getting a ware from an id\n\033Aplayer.\033X /(NYI // WIP /) - targeting player specific properties.</t>
    <t id="50">Input: {5554401,1}setval [h(elp)] $propertychain_set $propertychain_get [$propertychain_get2]\nEvaluates $propertychain_get and writes the result to $propertychain_set. In case one of the chains cannt be resolved entirely it will error out with the last valid Value and a list of the remaining properties. Optionally has a $propertychain_set2 for a few properties that need two inputs, like player_position, which needs a position and a rotation value.</t>
    <!-- t id 100 upwards is for Console commands, where the 100 place is the sequential command number, tens are the sub-commands, and even numbers are the commands, the following odd number is their respective help entry -->
    <!-- working on this -->
  </page>
</language>